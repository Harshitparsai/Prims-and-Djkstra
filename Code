#include<bits/stdc++.h>
using namespace std;
#define iPair pair<int,int>
#define INF INT_MAX
void add(vector<pair<int,int> > graph[],int u,int v,int w)
{
    graph[u].push_back(make_pair(v,w));
    graph[v].push_back(make_pair(u,w));
}
void prims(vector<pair<int,int> > graph[],int V)
{   vector<int> dist(V,INT_MAX);
    int u = 0;
    int m = 0;
    set<int> IN_MST;
    dist[u] =0;
    int ans =0;
    while(IN_MST.size()<V)
    {   ans+=m;
        IN_MST.insert(u);
        for(auto x: graph[u])
        {
            if(IN_MST.find(x.first) == IN_MST.end() && dist[x.first] > x.second)
            {
                dist[x.first] = x.second;
            }
        }
        for(int i=0;i<V;i++)
        {
            cout<<dist[i]<<" ";
        }
        cout<<endl;
        m = INT_MAX;
        for(int i=0;i<V;i++)
        {
            if(IN_MST.find(i) == IN_MST.end() && m > dist[i])
            {
                m = dist[i];
                u = i;
            }
        }
        
    }
    cout<<ans<<" ";
    
    
}
void djkstra(vector<pair<int,int> > graph[],int V,int s)
{
    vector<int> dist(V,INT_MAX);
    dist[s] = 0;
    priority_queue<iPair , vector<iPair > , greater<iPair > > pq;
    pq.push({0,s});
    while(pq.empty() == false)
    {
        int x = pq.top().second;
        
        pq.pop();
        for(pair<int,int> p : graph[x])
        {
            if(dist[p.first] > dist[x] + p.second)
            {
                dist[p.first] = dist[x] + p.second;
                pq.push(make_pair(dist[p.first],p.second));
            }
        }
    }
    for(int i=0;i<V;i++)
    {
        cout<<dist[i]<<" ";
    }
}
int main()
{
    int V=9;
    vector<pair<int,int> > graph[V];
    int a,b,c;
    while(cin>>a>>b>>c)
    {
        add(graph,a,b,c);
    }
    prims(graph,V);
    djkstra(graph,V,0);
}
